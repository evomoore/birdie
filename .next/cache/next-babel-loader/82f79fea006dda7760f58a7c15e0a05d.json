{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/a206613345/Desktop/Birdie/birdie-site/birdie-frontend/birdie-app/pages/post/[slug].js\";\nimport { useRouter } from 'next/router';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport React, { useState, useRef } from 'react';\nimport ImageGallery from '../../components/ImageGallery';\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position';\nimport useDimensions from \"react-cool-dimensions\";\nimport useWindowDimensions from '../../functions/useWindowDimensions';\n\nconst Post = ({\n  post\n}) => {\n  const router = useRouter();\n  const {\n    slug\n  } = router.query;\n  const {\n    0: imagesHeight,\n    1: setImagesHeight\n  } = useState(null);\n  const {\n    0: bodyHeight,\n    1: setBodyHeight\n  } = useState(null);\n  const {\n    0: textBodyTop,\n    1: setTextBodyTop\n  } = useState({\n    top: 100\n  });\n  const {\n    ref,\n    width,\n    height,\n    entry,\n    unobserve,\n    observe\n  } = useDimensions({\n    onResize: ({\n      width,\n      height,\n      entry,\n      unobserve,\n      observe\n    }) => {// Triggered whenever the size of the target is changed\n    }\n  });\n  const {\n    windowHeight,\n    windowWidth\n  } = useWindowDimensions();\n\n  const getBodyTop = () => {\n    if (-(textBodyTop + 30) + windowHeight > height) {\n      if (-(textBodyTop + 30) + windowHeight > imagesHeight) {\n        return {\n          top: -(height - (imagesHeight + textBodyTop))\n        };\n      } else {\n        return {\n          top: -(height - windowHeight)\n        };\n      }\n    } else {\n      return {\n        top: textBodyTop + 30\n      };\n    }\n  };\n\n  useScrollPosition(({\n    prevPos,\n    currPos\n  }) => {\n    console.log('x:' + currPos.x + ' y: ' + currPos.y);\n    setTextBodyTop(currPos.y);\n  }, [textBodyTop]);\n  console.log(\"Top Position\");\n  console.log(textBodyTop);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"post-container\",\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        ref: ref,\n        className: \"post-body\",\n        style: getBodyTop(),\n        sm: \"5\",\n        med: \"5\",\n        lg: \"5\",\n        dangerouslySetInnerHTML: {\n          __html: post.Body\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        sm: \"5\",\n        med: \"5\",\n        lg: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n        post: post,\n        setImagesHeight: setImagesHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Footer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getServerSideProps(context) {\n  const {\n    API_URL\n  } = process.env;\n  const res = await fetch(`${API_URL}/photo-journals?Slug=${context.params.slug}`);\n  const post_data = await res.json();\n  return {\n    props: {\n      post: post_data[0]\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["/Users/a206613345/Desktop/Birdie/birdie-site/birdie-frontend/birdie-app/pages/post/[slug].js"],"names":["useRouter","Container","Row","Col","React","useState","useRef","ImageGallery","useScrollPosition","useDimensions","useWindowDimensions","Post","post","router","slug","query","imagesHeight","setImagesHeight","bodyHeight","setBodyHeight","textBodyTop","setTextBodyTop","top","ref","width","height","entry","unobserve","observe","onResize","windowHeight","windowWidth","getBodyTop","prevPos","currPos","console","log","x","y","__html","Body","getServerSideProps","context","API_URL","process","env","res","fetch","params","post_data","json","props"],"mappings":"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","sourcesContent":["import { useRouter } from 'next/router'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport React, { useState, useRef } from 'react'\nimport ImageGallery from '../../components/ImageGallery'\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position'\nimport useDimensions from \"react-cool-dimensions\";\nimport useWindowDimensions from '../../functions/useWindowDimensions'\n\nconst Post = ({ post }) => {\n  const router = useRouter()\n  const { slug } = router.query\n  const [imagesHeight, setImagesHeight] = useState(null)\n  const [bodyHeight, setBodyHeight] = useState(null)\n\n  const [textBodyTop, setTextBodyTop] = useState({\n    top: 100\n  })\n\n  const { ref, width, height, entry, unobserve, observe } = useDimensions({\n    onResize: ({ width, height, entry, unobserve, observe }) => {\n      // Triggered whenever the size of the target is changed\n    },\n  });\n\n  const { windowHeight, windowWidth } = useWindowDimensions();\n\n  const getBodyTop = () => {\n    if ((-(textBodyTop + 30) + windowHeight) > height) {\n      if ((-(textBodyTop + 30) + windowHeight) > imagesHeight) {\n        return ({\n          top: -(height - (imagesHeight + textBodyTop))\n        })\n      } else {\n        return ({\n          top: -(height - windowHeight)\n        })\n      }\n    } else {\n      return ({\n        top: textBodyTop + 30\n      })\n    }\n  }\n\n  useScrollPosition(\n    ({ prevPos, currPos }) => {\n      console.log('x:' + currPos.x + ' y: ' + currPos.y)\n      setTextBodyTop(currPos.y)\n    },\n    [textBodyTop]\n  )\n\n  console.log(\"Top Position\")\n  console.log(textBodyTop)\n\n  return (\n    <Container className=\"post-container\" fluid>\n      <Row>\n        <Col ref={ref} className=\"post-body\" style={getBodyTop()} sm=\"5\" med=\"5\" lg=\"5\" dangerouslySetInnerHTML={{__html:post.Body}}>\n        </Col>\n        <Col sm=\"5\" med=\"5\" lg=\"5\">\n        </Col>\n        <ImageGallery post={post} setImagesHeight={setImagesHeight} />\n      </Row>\n      <Row>\n        <Col>\n          <h1>Footer</h1>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport async function getServerSideProps(context)  {\n\n  const { API_URL } = process.env\n\n  const res = await fetch(`${API_URL}/photo-journals?Slug=${context.params.slug}`)\n  const post_data = await res.json()\n\n  return {\n    props: {\n      post: post_data[0]\n    }\n  }\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}