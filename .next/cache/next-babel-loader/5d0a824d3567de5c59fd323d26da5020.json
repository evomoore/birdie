{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  if (false) {\n    const {\n      innerWidth: windowWidth,\n      innerHeight: windowHeight\n    } = window;\n    return {\n      windowWidth,\n      windowHeight\n    };\n  } else {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n}\n\nexport default function useWindowDimensions() {\n  const {\n    0: windowDimensions,\n    1: setWindowDimensions\n  } = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowDimensions;\n}","map":{"version":3,"sources":["/Users/a206613345/Desktop/Birdie/birdie-site/birdie-frontend/birdie-app/functions/useWindowDimensions.js"],"names":["useState","useEffect","getWindowDimensions","innerWidth","windowWidth","innerHeight","windowHeight","window","x","y","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,mBAAT,GAA+B;AAC7B,aAAmC;AACjC,UAAM;AAAEC,MAAAA,UAAU,EAAEC,WAAd;AAA2BC,MAAAA,WAAW,EAAEC;AAAxC,QAAyDC,MAA/D;AACA,WAAO;AACLH,MAAAA,WADK;AAELE,MAAAA;AAFK,KAAP;AAID,GAND,MAMO;AACL,WAAO;AACLE,MAAAA,CAAC,EAAE,CADE;AAELC,MAAAA,CAAC,EAAE;AAFE,KAAP;AAID;AACF;;AAED,eAAe,SAASC,mBAAT,GAA+B;AAC5C,QAAM;AAAA,OAACC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CZ,QAAQ,CAACE,mBAAmB,EAApB,CAAxD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,aAASY,YAAT,GAAwB;AACtBD,MAAAA,mBAAmB,CAACV,mBAAmB,EAApB,CAAnB;AACD;;AAEDK,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMN,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAOF,gBAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  if (typeof window !== \"undefined\") {\n    const { innerWidth: windowWidth, innerHeight: windowHeight } = window;\n    return {\n      windowWidth,\n      windowHeight\n    };\n  } else {\n    return {\n      x: 0,\n      y: 0\n    }\n  }\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n"]},"metadata":{},"sourceType":"module"}